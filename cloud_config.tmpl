#cloud-config

hostname: {{ coreos_hostname }}
coreos:
  update:
    group: "{{coreos_channel}}"
    reboot-strategy: "{{coreos_reboot_strategy}}"
  flannel:
    interface: {{ inventory_hostname }}
  locksmith:
    endpoint: https://{{ inventory_hostname }}:2379
    etcd_cafile: /etc/ssl/etcd/ca.crt
    etcd_certfile: /etc/ssl/etcd/key.crt
    etcd_keyfile: /etc/ssl/etcd/key.key
  units:
    - name: serial-getty@ttyS1.service
      command: start
      enable: true
    - name: etcd-member.service
      command: start
      enable: true
      drop-ins:
        - name: 40-etcd-cluster.conf
          content: |
            [Service]
{% if gateway is defined and route_destination is defined %}
            ExecStartPre=/usr/bin/route add -net {{ route_destination }} gw {{ gateway }}
{% endif  %}
{% if etcd_image_tag is defined %}
            Environment="ETCD_IMAGE_TAG={{ etcd_image_tag }}"
{% endif  %}
            Environment="ETCD_NAME={{ coreos_hostname }}"
            Environment="ETCDCTL_CA_FILE=/etc/ssl/etcd/ca.crt"
            Environment="ETCDCTL_KEY_FILE=/etc/ssl/etcd/key.key"
            Environment="ETCDCTL_CERT_FILE=/etc/ssl/etcd/key.crt"
            Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
            Environment="ETCD_PEER_CA_FILE=/etc/ssl/certs/ca.crt"
            Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/key.crt"
            Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/key.key"
            Environment="ETCD_CA_FILE=/etc/ssl/certs/ca.crt"
            Environment="ETCD_CERT_FILE=/etc/ssl/certs/key.crt"
            Environment="ETCD_KEY_FILE=/etc/ssl/certs/key.key"
            Environment="ETCD_INITIAL_CLUSTER={% for host in groups['etcd-node'] %}{{ hostvars[host]['coreos_hostname'] }}=https://{{host}}:2380{%if not loop.last %},{% endif %}{% endfor %}"
            Environment="ETCD_ADVERTISE_CLIENT_URLS=https://{{ inventory_hostname }}:2379"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://{{ inventory_hostname }}:2380"
            Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379,https://0.0.0.0:4001"
            Environment="ETCD_LISTEN_PEER_URLS=https://{{ inventory_hostname }}:2380"
    {% if inventory_hostname in groups['etcd-proxy'] %}
            Environment="ETCD_PROXY=on"
    {% endif %}

    - name: flanneld.service
      enable: true
      command: start
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Unit]
          Requires=etcd-member.service
          After=etcd-member.service
          [Service]
          EnvironmentFile=/etc/environment
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "{{coreos_flanneld_subnet}}" }'

{% if inventory_hostname in groups['ceph'] %}
{% if ceph_osd_devices is defined %}
{% for ceph_osd_device in ceph_osd_devices.split(';') %}
    - name: prepare-data-drive-{{ ceph_osd_device }}.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Prepare data drive
        Ater=dev-{{ ceph_osd_device }}.device
        Requires=dev-{{ ceph_osd_device }}.device
        ConditionPathExists=!{{ ceph_osd_device }}1
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=dd if=/dev/zero of=/dev/{{ ceph_osd_device }} bs=512 count=1 conv=notrunc
        ExecStart=/usr/sbin/wipefs -f /dev/{{ ceph_osd_device }}
        ExecStart=/usr/sbin/parted -s -a opt /dev/{{ ceph_osd_device }} mklabel gpt -- mkpart primary ext4 2048s -1
        ExecStart=/usr/sbin/parted -s /dev/{{ ceph_osd_device }} align-check optimal 1
    - name: ceph-osd-{{ ceph_osd_device }}.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Ceph Object Storage Daemon ({{ ceph_osd_device }})
        After=network.target etcd-member.service

        [Service]
        Environment="OSD_NAME={{ ceph_osd_device }}.osd.{{ coreos_hostname }}"
        Environment="CEPH_PUBLIC_NETWORK={{ ceph_public_network }}"
        Environment="KV_TYPE=etcd"
        Environment="KV_IP={{ inventory_hostname }}"
        Environment="KV_PORT=2379"
        Environment="KV_CA_CERT=/etc/ssl/etcd-ca.crt"
        Environment="KV_CLIENT_CERT=/etc/ssl/etcd-client.crt"
        Environment="KV_CLIENT_KEY=/etc/ssl/etcd-client.key"
        Environment="OSD_DEVICE=/dev/{{ ceph_osd_device }}"
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/mkdir -p /var/lib/ceph/mon
        ExecStartPre=/usr/bin/mkdir -p /etc/ceph
        ExecStartPre=/usr/bin/mkdir -p /etc/ganesha
        ExecStart=/usr/bin/rkt run --net=host --inherit-env \
           --trust-keys-from-https \
           --volume volume-var-lib-ceph,kind=host,source=/var/lib/ceph \
           --volume volume-etc-ceph,kind=host,source=/etc/ceph \
           --volume volume-etc-ganesha,kind=host,source=/etc/ganesha \
           --volume volume-etc-ssl,kind=host,source=/etc/ssl/certs \
           --mount volume=volume-etc-ganesha,target=/etc/ganesha \
           --mount volume=volume-var-lib-ceph,target=/var/lib/ceph \
           --mount volume=volume-etc-ceph,target=/etc/ceph \
           --mount volume=volume-etc-ssl,target=/etc/ssl \
           --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
           {{ ceph_image }}:{{ ceph_version }} \
           --caps-retain=CAP_NET_ADMIN,CAP_NET_BIND_SERVICE,CAP_SETGID,CAP_SETUID,CAP_NET_RAW \
           -- \
           osd
        Restart=always
        RestartSec=10s
        TimeoutStartSec=100
        TimeoutStopSec=15

        [Install]
        WantedBy=multi-user.target

{% endfor %}
{% endif %}

    - name: ceph-mon.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Ceph Monitor Daemon
        After=network.target etcd-member.service

        [Service]
        Environment="MON_NAME={{ coreos_hostname }}"
        Environment="CEPH_PUBLIC_NETWORK={{ ceph_public_network }}"
        Environment="MON_IP={{ inventory_hostname }}"
        Environment="KV_TYPE=etcd"
        Environment="KV_IP={{ inventory_hostname }}"
        Environment="KV_PORT=2379"
        Environment="KV_CA_CERT=/etc/ssl/ca.crt"
        Environment="KV_CLIENT_CERT=/etc/ssl/key.crt"
        Environment="KV_CLIENT_KEY=/etc/ssl/key.key"
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/mkdir -p /var/lib/ceph/mon
        ExecStartPre=/usr/bin/mkdir -p /etc/ceph
        ExecStartPre=/usr/bin/mkdir -p /etc/ganesha
        ExecStart=/usr/bin/rkt run --net=host --inherit-env \
           --trust-keys-from-https \
           --volume volume-var-lib-ceph,kind=host,source=/var/lib/ceph \
           --volume volume-etc-ceph,kind=host,source=/etc/ceph \
           --volume volume-etc-ganesha,kind=host,source=/etc/ganesha \
           --volume volume-etc-ssl,kind=host,source=/etc/ssl/certs \
           --mount volume=volume-etc-ganesha,target=/etc/ganesha \
           --mount volume=volume-var-lib-ceph,target=/var/lib/ceph \
           --mount volume=volume-etc-ceph,target=/etc/ceph \
           --mount volume=volume-etc-ssl,target=/etc/ssl \
           --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
           {{ ceph_image }}:{{ ceph_version }} \
           --caps-retain=CAP_NET_ADMIN,CAP_NET_BIND_SERVICE,CAP_SETGID,CAP_SETUID,CAP_NET_RAW \
           -- \
           mon
        Restart=always
        RestartSec=10s
        TimeoutStartSec=100
        TimeoutStopSec=15

{% endif %}

    - name: "00-wired.network"
      runtime: true
      content: |
        [Match]
        Name=en*
        [Network]
        DHCP=true
{% if cluster_failover_ips is defined %}
{% for ip in cluster_failover_ips.split(';') %}
        Address={{ ip }}
{% endfor %}
{% endif  %}

    - name: iptables-restore.service
      command: start
      enable: true
    - name: settimezone.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Set the time zone
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone {{coreos_timezone}}
        RemainAfterExit=yes
        Type=oneshot
    - name: systemd-modules-load.service
      command: restart
    - name: systemd-sysctl.service
      command: restart
    - name: systemd-timesyncd.service
      command: start
      enable: true
    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API
        After=docker.service
        Requires=docker.service

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both
        [Install]
        WantedBy=sockets.target

write_files:
  - path: /etc/environment
    permissions: 0774
    owner: root
    content: |
      COREOS_PUBLIC_IPV4={{ inventory_hostname }}
      ETCD_SSL_DIR=/etc/ssl/etcd
      ETCDCTL_CA_FILE=/etc/ssl/etcd/ca.crt
      ETCDCTL_KEY_FILE=/etc/ssl/etcd/key.key
      ETCDCTL_CERT_FILE=/etc/ssl/etcd/key.crt
      ETCDCTL_PEERS="{% for host in groups['etcd-node'] %}https://{{host}}:2379{%if not loop.last %},{% endif %}{% endfor %}"
      FLANNELD_ETCD_ENDPOINTS=https://{{ inventory_hostname }}:2379
      FLANNELD_ETCD_KEYFILE=/etc/ssl/etcd/key.key
      FLANNELD_ETCD_CERTFILE=/etc/ssl/etcd/key.crt
      FLANNELD_ETCD_CAFILE=/etc/ssl/etcd/ca.crt
      LOCKSMITHCTL_ETCD_CAFILE=/etc/ssl/etcd/ca.crt
      LOCKSMITHCTL_ETCD_KEYFILE=/etc/ssl/etcd/key.key
      LOCKSMITHCTL_ETCD_CERTFILE=/etc/ssl/etcd/key.crt
      LOCKSMITHCTL_ENDPOINT=https://{{ inventory_hostname }}:2379
  - path: /etc/etcd-client.config.json
    permissions: '0644'
    content: |
       {
         "cluster": {
         "machines": [ "https://{{ inventory_hostname }}:2379" ] },
         "config": {
            "caCertFiles": [ "/etc/ssl/etcd/ca.crt" ],
            "keyFile": "/etc/ssl/etcd/key.key",
            "certFile": "/etc/ssl/etcd/key.crt",
         "timeout": 5000000000,
         "consistency": "WEAK"
         }
       }
  - path: "/home/core/.toolboxrc"
    owner: core
    content: |
      TOOLBOX_DOCKER_IMAGE={{coreos_toolbox_docker_image}}
      TOOLBOX_DOCKER_TAG={{coreos_toolbox_docker_tag}}
  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""
  - path: /etc/modules-load.d/nf.conf
    content: nf_conntrack
  - path: /etc/sysctl.d/ipv4_forward.conf
    content: net.ipv4.ip_forward=1
  - path: /etc/sysctl.d/swapiness.conf
    content: vm.swappiness=1
  - path: /etc/sysctl.d/overcommit_memory.conf
    content: vm.overcommit_memory=1
  - path: /etc/sysctl.d/max_map_count.conf
    content: vm.max_map_count=65535
  {% if extra_cas.results is defined %}
  {% for item in extra_cas.results %}

  - path: /etc/ssl/certs/{{ item.item|basename }}
    encoding: base64
    content: |
      {{ item.content|indent(width=6) }}
  {% endfor %}
  {% endif %}

  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /etc/ssl/etcd/ca.crt
    permissions: 0644
    content: |
      {{ etcd_ca_certificate|indent(width=6) }}

  - path: /etc/ssl/etcd/key.crt
    permissions: 0644
    content: |
      {{ etcd_cert|indent(width=6) }}

  - path: /etc/ssl/etcd/key.key
    permissions: 0644
    content: |
      {{ etcd_key|indent(width=6) }}

  - path: /etc/hosts
    content: |
      127.0.0.1       localhost {{ coreos_hostname }}
      ::1             localhost

{% if inventory_hostname in groups['ceph'] %}
  - path: /opt/bin/ceph
    permissions: '0775'
    content: |
      #!/bin/sh
      /usr/bin/docker run --rm -i --net=host -v /etc/ceph:/etc/ceph ceph/base ceph "$@"
  - path: /opt/bin/ceph-disk
    permissions: '0775'
    content: |
      #!/bin/sh
      /usr/bin/docker run --rm --privileged=true -i --net=host -v /etc/ceph:/etc/ceph -v /dev:/dev ceph/base ceph-disk "$@"
  - path: /opt/bin/rados
    permissions: '0775'
    content: |
      #!/bin/sh
      /usr/bin/docker run --rm -i  --net=host -v /etc/ceph:/etc/ceph ceph/base rados "$@"
  - path: /opt/bin/rdb
    permissions: '0775'
    content: |
      #!/bin/sh
      /usr/bin/docker run --rm -i --net=host -v /dev:/dev -v /sys:/sys --net=host --privileged=true -v /etc/ceph:/etc/ceph ceph/base rbd "$@"
{% endif %}

  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root:root
    content: |
      *filter
      :INPUT ACCEPT [0:0]
      :FORWARD ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -s {% for host in groups['coreos'] %}{{host}}{%if not loop.last %},{% endif %}{% endfor %} -j ACCEPT
      -A INPUT -i tap0 -p all -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      -A INPUT -j DROP
      COMMIT

ssh_authorized_keys:
  - "{{  lookup('file', '~/.ssh/id_rsa.pub') }}"
{% for key in coreos_public_keys %}
  - "{{ key }}"
{% endfor %}
