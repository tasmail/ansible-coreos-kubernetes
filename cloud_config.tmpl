#cloud-config

hostname: {{ coreos_hostname }}
ssh_authorized_keys:
  - "{{  lookup('file', '~/.ssh/id_rsa.pub') }}"
{% for key in coreos_public_keys %}
  - {{ key }}
{% endfor %}

write_files:
  {% if extra_cas.results is defined %}
  {% for item in extra_cas.results %}
  - path: /etc/ssl/certs/{{ item.item|basename }}
    encoding: base64
    content: |
      {{ item.content|indent(width=6) }}
  {% endfor %}
  {% endif %}
  - path: /opt/bin/update-window.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      # sleep a rondom delay between 0 and five minutes to prevent every machine trying to get the lock at the same time
      delay=$(/usr/bin/expr $RANDOM % 300 )
      sleep $delay

      if locksmithctl lock || locksmithctl status | grep `cat /etc/machine-id`; then
        rebootflag='NEED_REBOOT'
        if update_engine_client -status | grep $rebootflag || etcdctl get  /needsreboot/$( cat /etc/machine-id); then
            if  ! etcdctl get /rebootlock;  then
              etcdctl rm /needsreboot/$( cat /etc/machine-id) || true;
              etcdctl set /rebootlock "Reboot  machines locked for 1h" --ttl 3600
              echo "all checks for update window passed; rebooting now";
              reboot;
            else
              echo "reboot is locked"
            fi
        else
            echo "no reboot needed, unlock"
            locksmithctl unlock;
        fi
      fi
  - path: /opt/bin/update_needed.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      . /etc/environment
      etcdctl set /needsreboot/$( cat /etc/machine-id) $( cat /etc/machine-id)
  - path: /opt/bin/waiter.sh
    owner: root
    permissions: 0755
    content: |
      #! /usr/bin/bash
      until etcdctl cluster-health; do sleep 2; done
  - path: /etc/etcd-client.config.json
    permissions: '0644'
    content: |
       {
         "cluster": {
         "machines": [ "https://{{ inventory_hostname }}:2379" ] },
         "config": {
            "certFile": "/etc/ssl/etcd/key.crt",
            "keyFile": "/etc/ssl/etcd/key.key",
            "caCertFiles": [ "/etc/ssl/etcd/ca.crt" ],
         "timeout": 5000000000,
         "consistency": "WEAK"
         }
       }
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /etc/environment
    permissions: 0774
    owner: root
    content: |
      COREOS_PUBLIC_IPV4={{ inventory_hostname }}
      #COREOS_PRIVATE_IPV4=172.17.8.101
      ETCDCTL_CERT_FILE=/etc/ssl/etcd/key.crt
      ETCDCTL_CA_FILE=/etc/ssl/etcd/ca.crt
      ETCDCTL_PEERS="{% for host in groups['etcd-node'] %}https://{{host}}:2379{%if not loop.last %},{% endif %}{% endfor %}"
      ETCDCTL_KEY_FILE=/etc/ssl/etcd/key.key
      LOCKSMITHCTL_ETCD_CERTFILE=/etc/ssl/etcd/key.crt
      LOCKSMITHCTL_ETCD_CAFILE=/etc/ssl/etcd/ca.crt
      LOCKSMITHCTL_ENDPOINT=https://{{ inventory_hostname }}:4001
      LOCKSMITHCTL_ETCD_KEYFILE=/etc/ssl/etcd/key.key
  - path: /etc/flannel/options.env
    permissions: 0774
    owner: root
    content: |
      FLANNELD_ETCD_ENDPOINTS=https://{{ inventory_hostname }}:4001
      FLANNELD_ETCD_KEYFILE=/etc/ssl/etcd/key.key
      FLANNELD_ETCD_CERTFILE=/etc/ssl/etcd/key.crt
      FLANNELD_ETCD_CAFILE=/etc/ssl/etcd/ca.crt
      FLANNELD_IFACE={{ inventory_hostname }}
  - path: /etc/ssl/etcd/ca.crt
    permissions: 0644
    content: |
      {{ etcd_ca_certificate|indent(width=6) }}
  - path: /etc/ssl/etcd/key.crt
    permissions: 0644
    content: |
      {{ etcd_cert|indent(width=6) }}
  - path: /etc/ssl/etcd/key.key
    permissions: 0644
    content: |
      {{ etcd_key|indent(width=6) }}
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root:root
    content: |
      *filter
      :INPUT ACCEPT [0:0]
      :FORWARD ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -s {% for host in groups['etcd-node'] %}{{host}}{%if not loop.last %},{% endif %}{% endfor %} -j ACCEPT
      -A INPUT -i tap0 -p all -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      -A INPUT -j DROP
      COMMIT

coreos:
  #etcd:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new
    # WARNING: replace each time you 'vagrant destroy'
    #discovery: https://discovery.etcd.io/4dbce9b90646e13c17bd298cffc0ed99
    #addr: {{ inventory_hostname }}:4001
    #peer-addr: {{ inventory_hostname }}:7001
  update:
    reboot-strategy: off
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    #discovery: "{# etcd_discovery_url #}"
    name: {{ coreos_hostname }}
    initial-cluster: "{% for host in groups['etcd-node'] %}{{ hostvars[host]['coreos_hostname'] }}=https://{{host}}:2380,{{ hostvars[host]['coreos_hostname'] }}=https://{{host}}:7001{%if not loop.last %},{% endif %}{% endfor %}"
    #initial_cluster_state: NEW
    # multi-region and multi-cloud deployments need to use $public_ipv4
    {% if inventory_hostname in groups['etcd-node'] %}

    advertise-client-urls: "https://{{ inventory_hostname }}:2379,https://{{ inventory_hostname }}:4001"
    initial-advertise-peer-urls: "https://{{ inventory_hostname }}:2380,https://{{ inventory_hostname }}:7001"
    listen-peer-urls: "https://0.0.0.0:2380,https://0.0.0.0:7001"
    listen-client-urls: "https://0.0.0.0:2379,https://0.0.0.0:4001"
    {% endif %}

    {% if inventory_hostname in groups['etcd-proxy'] %}

    proxy: on
    {% endif %}
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: "https://0.0.0.0:2379,https://0.0.0.0:4001"
  locksmith:
    endpoint: https://{{ inventory_hostname }}:2379
    etcd_cafile: /etc/ssl/etcd/ca.crt
    etcd_certfile: /etc/ssl/etcd/key.crt
    etcd_keyfile: /etc/ssl/etcd/key.key
  flannel:
    interface: {{ inventory_hostname }}
  units:
    - name: locksmithd.service
      command: stop
    - name: update-window.service
      runtime: true
      content: |
        [Unit]
        Description=Reboot if an update has been downloaded

        [Service]
        EnvironmentFile=/etc/environment
        ExecStart=/opt/bin/update-window.sh
    - name: update-window.timer
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Reboot timer

        [Timer]
        OnCalendar=*:0/5

    - name: etcd2.service
      command: start
      drop-ins:
{% if baremetal_provider != 'vagrant' %}
        - name: 50-network-wait.conf
          content: |
            [Unit]
            Requires=systemd-networkd-wait-online.service
            After=systemd-networkd-wait-online.service setup-subnet-routes.service
            Requires=setup-subnet-routes.service
{% else  %}
        - name: 50-network-wait.conf
          content: |
            [Unit]
            Requires=systemd-networkd-wait-online.service
            After=systemd-networkd-wait-online.service
{% endif %}
        - name: 30-certificates.conf
          content: |
            [Service]
            # Client Env Vars
            Environment=ETCD_CA_FILE=/etc/ssl/etcd/ca.crt
            Environment=ETCD_CERT_FILE=/etc/ssl/etcd/key.crt
            Environment=ETCD_KEY_FILE=/etc/ssl/etcd/key.key
            # Peer Env Vars
            Environment=ETCD_PEER_CA_FILE=/etc/ssl/etcd/ca.crt
            Environment=ETCD_PEER_CERT_FILE=/etc/ssl/etcd/key.crt
            Environment=ETCD_PEER_KEY_FILE=/etc/ssl/etcd/key.key
    - name: update_ca_certificates.service
      command: start
      content: |
        [Unit]
        Before=docker.service
        [Service]
        ExecStart=/usr/sbin/update-ca-certificates
        RemainAfterExit=yes
        Type=oneshot
    - name: docker.service
      command: start
      drop-ins:
        - name: 50-wait-for-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            Wants=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/run/flannel/flannel_docker_opts.env
{% if baremetal_provider == 'vagrant' %}
    - name: 00-wired.network
      runtime: true
      content: |
        [Match]
        Name=eth1
        [Network]
        DHCP=ipv4
        DNS=127.0.0.1
        DNS=8.8.8.8
        Domains=
{% else %}
    - name: 00-wired.network
      runtime: true
      content: |
        [Match]
        Name=en*
        [Network]
        DHCP=ipv4
        DNS=127.0.0.1
        Domains=
{% endif %}
{% if cluster_failover_ips is defined %}
{% for ip in cluster_failover_ips.split(';') %}
        Address={{ ip }}
{% endfor %}
{% endif  %}

{% if baremetal_provider == 'vagrant' %}
    - name: vagrant_dns.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStart=/usr/bin/sed -i '/10.0.2.3/d' /etc/resolv.conf
        RemainAfterExit=yes
        Type=oneshot
{% endif %}
    - name: etcd2.service
      command: start
    - name: etcd-waiter.service
      command: start
      content: |
        [Unit]
        Description=etcd waiter
        Wants=network-online.target
        Wants=etcd2.service
        After=etcd2.service
        After=network-online.target
        Before=flanneld.service
        Before=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/waiter.sh
        ExecStart=/usr/bin/bash /opt/bin/waiter.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service etcd-waiter.service
            After=etcd2.service etcd-waiter.service
            Before=docker.service
            [Service]
            EnvironmentFile=/etc/environment
            ExecStartPre=/usr/bin/etcdctl cluster-health
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16", "Backend": { "Type": "alloc"} }'
        - name: 40-symlink.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
